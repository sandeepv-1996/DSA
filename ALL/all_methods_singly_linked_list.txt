// SINGLY LINKED LIST

#include<stdio.h>
#include<stdlib.h>
struct node{
  int data;
  struct node* next;
};
struct node* head=NULL;
int length=0;
void insert_first(int new_data)
{
    struct node* temp;
    temp=(struct node*)malloc(sizeof(struct node));
    temp->data=new_data;
    temp->next=NULL;
    if(head==NULL)
    {
        temp=head;
    }
    else
    {
        temp->next=head;
        head=temp;
        
    }
   
}
void insert_position(int pos,int n){
    struct node* temp,*temp2;
    int i=1;
    temp=head;
    if(pos>length)
    {
        printf("invalid location");
        
    }
    else
    {
        while(i<(pos-1))
        {
            temp=temp->next;
            i++;
        }
        
    }
    temp2=(struct node*)malloc(sizeof(struct node));
    temp2->data=n;
    temp2->next=NULL;
    temp2->next=temp->next;
    temp->next=temp2;
        
    
}
void reverse()
{
    struct node* prev,*curr,*link;
    prev=NULL;
    curr=head;
    link=NULL;
    while(curr!=NULL)
    {
        link=curr->next;
        curr->next=prev;
        prev=curr;
        curr=link;
    }
    head=prev;
   
}

void node_swap(int loc)
{
    struct node* temp,*p1,*p2;
    int i=1;
    temp=head;
    while(i<loc)
    {
        temp=temp->next;
        i++;
        
    }
    p1=temp->next;
    p2=p1->next;
    //actually swaping logic starts
    p1->next=p2->next;
    p2->next=p1;
    temp->next=p2;
    
    
}

void push(int new_data)
{
    struct node* temp;
    struct node* p;
    p=head;
    
    temp=(struct node *)malloc(sizeof(struct node));
    temp->data=new_data;
    temp->next=NULL;
    if(head==NULL)
    {
        head=temp;

    }
    else
    {
        while(p->next!=NULL)
        {
            p=p->next;
        }
        p->next=temp;
        
        
    }
}
void display()
{   int count=0;
    struct node *p;
    p=head;
    while(p!=NULL)
    {
        printf("%d\n",p->data);
        p=p->next;
        count++;
    }
    length=count;
    //printf("display done\n");
    printf("Length of linked list is %d",length);
}

int main() {
    push(1);
    
    push(2);
  
    push(3);

    push(4);

  
   printf("\n");
    insert_first(11);
    insert_first(12);

   printf("\n");
insert_position(3,0);
display();
   printf("\n");
reverse(); // reversing a linked list
    display();
     printf("\n");
     
 node_swap(3);// node swaping
    display();
}

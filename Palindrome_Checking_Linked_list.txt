#include<stdio.h>
#include<stdlib.h>

struct node{
  char data;
  struct node* next;
};
int count=0;
struct node* head=NULL;


void Insertion(int n)
{
    struct node* t;
struct node* temp;
temp=head;
t=(struct node*)malloc(sizeof(struct node));
t->data=n;
t->next=NULL;
    if(head==NULL)
    {
        head=t;
    }
    else
    {
        temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
            
        }
        temp->next=t;
    }
    
}
void Traverse()
{ count=0;
    struct node* t;
    t=head;
    while(t!=NULL)
    {
        printf("%c->",t->data);
        count++;
        t=t->next;
        
    }
    printf("NULL");
    printf("\n");
}

void rev_Traverse(struct node* second_half)
{
    struct node* t;
    t=second_half;
    while(t!=NULL)
    {
        printf("%c->",t->data);
        
        t=t->next;
        
    }
    printf("NULL");
    printf("\n");
    
}

struct node* reverse(struct node* second_half)
{   
    struct node* prev,*current;
    struct node* move;
    struct node* op;
    prev=NULL;
    move=NULL;
    current=second_half;
    while(current!=NULL)
    {
        
        move=current->next;
        current->next=prev;
        prev=current;;
        current=move;
        
    }
    op=prev;
    
    return op;
}


int Length()
{
    int len=0;
    struct node* t;
    t=head;
    while(t->next!=NULL)
    {
        t=t->next;
        len++;
    }
    return len;
    
}

int Compare(struct node* head,struct node* op)
{
    
    struct node* temp1=head;
    struct node* temp2=op;
    while(temp1 !=NULL && temp2!=NULL)
    {
        if(temp1->data == temp2->data)
        {
            temp1=temp1->next;
            temp2=temp2->next;
        }
        else 
        {
            return 0;
        }
        
    }
    if(temp1 == NULL && temp2 == NULL)
    {
        return 1;
    }
    else
    {
        return 0;
    }
    
    
    
    
    
}
void isPalindrome()
{
    struct node* prev_slow,*slow,*fast;
    struct node* second_half;
    slow=head;
    prev_slow=slow;
    fast=head;
    struct node* mid_node;
    
    while(fast && fast->next !=NULL)
    {
        fast=fast->next->next;
        prev_slow=slow;
        slow=slow->next;
    }
    
    if(fast != NULL)
    {
        mid_node=slow;
        slow=slow->next;
       
    }
   
        second_half=slow;
    
    prev_slow->next=NULL;
    second_half=slow;
    struct node* op=reverse(second_half);
    int final=Compare(head,op);
    struct node* op1=reverse(op);
   if (mid_node != NULL)  
         { 
            prev_slow->next = mid_node; 
            mid_node->next = second_half; 
         } 
         else  prev_slow->next = second_half; 
    if(final == 1 )
    {
        printf("It is Palindrome\n");
    }
    else
    {
        printf("Not palindrome\n");
    }
  
}


int main() {
  char str[]="abcba";
  for(int i=0;str[i]!='\0';i++)
  {
      Insertion(str[i]);
  }
  
  Traverse();
  printf("\n");
  isPalindrome();
 printf("\n");
Traverse();
  
  
}

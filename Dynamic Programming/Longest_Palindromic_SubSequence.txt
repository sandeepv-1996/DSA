
import.java.util.*;

public class MyClass {
    
    
    static void Longest_Palindrome_Subsequence(String str,int n)
    {
        int maxLen=1;
        int start=0;
        boolean[][] table=new boolean[n][n];
        
        for(int i=0;i<n;i++)
        {
            table[i][i]=true;
           
        }
        for(int i=0;i<n-1;i++)
        {
            if(str.charAt(i)==str.charAt(i+1))
            {
                table[i][i+1]=true;
                maxLen=2;
                start=i;
            }
            else
            {
                table[i][i+1]=false;
            }
        }
        
        for(int k=3;k<n;k++)
        {
            
        for(int i=0;i<n-k+1;i++)
        {
            
            int j=i+k-1;
            
            if(str.charAt(i)==str.charAt(j) && table[i+1][j-1])
            {
                table[i][j]=true;
                if(k>maxLen)
                {
                    maxLen=k;
                    start=i;
                }
            }
            else
            {
                table[i][j]=false;
            }
            
            
        }
        
        }
        System.out.println(maxLen); // Prints longest palindromic Length
        String res=str.substring(start,(start+maxLen)); // prints palindrome with max length
         System.out.println(res);
        
    }
    public static void main(String args[]) {
        Scanner sc=new Scanner(System.in);
       String str=sc.next();
       
       int n=str.length();
       
       Longest_Palindrome_Subsequence(str,n);
    }
}
